---
# This workflow will install Python dependencies, run tests and lint with
# a variety of Python versions For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: PyPI package tests

on:  # yamllint disable-line rule:truthy
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch:

jobs:
    tests:
        uses: ./.github/workflows/tests.yml

    create-wheels:
        name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform }}
        runs-on: ${{ matrix.os }}
        needs: tests
        strategy:
            fail-fast: false
            matrix:
                include:
                    # 64-bit Linux
                    - os: ubuntu-latest
                      python: 39
                      platform: manylinux_x86_64
                    - os: ubuntu-latest
                      python: 310
                      platform: manylinux_x86_64
                    - os: ubuntu-latest
                      python: 311
                      platform: manylinux_x86_64
                    - os: ubuntu-latest
                      python: 312
                      platform: manylinux_x86_64
                    - os: ubuntu-latest
                      python: 313
                      platform: manylinux_x86_64

                    # For the time being, skipping macos
                    # # 64-bit macOS (universal2)
                    # - os: macos-latest
                    #   python: 39
                    #   platform: macosx_universal2
                    # - os: macos-latest
                    #   python: 310
                    #   platform: macosx_universal2
                    # - os: macos-latest
                    #   python: 311
                    #   platform: macosx_universal2
                    # - os: macos-latest
                    #   python: 312
                    #   platform: macosx_universal2
                    # - os: macos-latest
                    #   python: 313
                    #   platform: macosx_universal2

                    # 64-bit Windows
                    - os: windows-latest
                      python: 39
                      platform: win_amd64
                    - os: windows-latest
                      python: 310
                      platform: win_amd64
                    - os: windows-latest
                      python: 311
                      platform: win_amd64
                    - os: windows-latest
                      python: 312
                      platform: win_amd64
                    - os: windows-latest
                      python: 313
                      platform: win_amd64

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Install mingw-w64 on Windows
              if: ${{ runner.os == 'Windows' }}
              uses: msys2/setup-msys2@v2
              with:
                  path-type: inherit
                  install: mingw-w64-x86_64-gcc-fortran

            - name: Setup gfortran compiler version 13
              uses: fortran-lang/setup-fortran@v1
              id: setup-fortran
              with:
                  compiler: gcc
                  version: 13
              env:
                  FC: ${{ steps.setup-fortran.outputs.fc }}
                  CC: ${{ steps.setup-fortran.outputs.cc }}

            - name: Build and test wheels
              uses: pypa/cibuildwheel@v2.21.3

              env:
                  CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform }}

                  MACOSX_DEPLOYMENT_TARGET: 14.0

                  CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
                  CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014

                  CIBW_BUILD_FRONTEND: build

                  CIBW_BEFORE_BUILD: |
                      python -m pip install --upgrade pip
                      python -m pip install build meson meson-python 'numpy>=2'
                      python -m pip install setuptools_scm
                      python -m pip install pytest
                  # Use delvewheel on windows
                  CIBW_BEFORE_BUILD_WINDOWS: |
                      python -m pip install delvewheel

                  CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: |
                      delvewheel repair -w {dest_dir} {wheel}

                  CIBW_TEST_REQUIRES: pytest
                  CIBW_TEST_COMMAND_LINUX: |
                      cd {project} && python -m pytest
                  CIBW_TEST_COMMAND_MACOS: |
                      cd {project} && python -m pytest
                  CIBW_TEST_COMMAND_WINDOWS: |
                      cd /d {project} && python -m pytest

            - name: Upload wheel as artifact
              uses: actions/upload-artifact@v4
              with:
                  name: |
                    ${{ matrix.os }}-${{ matrix.python }}-${{ matrix.platform }}
                  path: wheelhouse/*.whl

    create-sdist:
        runs-on: ubuntu-latest
        name: Create source distribution
        needs: tests
        strategy:
            fail-fast: false

        steps:
            - name: Checkout source
              uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Set up Python 3.12
              uses: actions/setup-python@v5
              with:
                  python-version: 3.12

            - name: Build sdist
              run: |
                  python -m pip install build
                  python -m build --sdist .

            - name: Upload sdist as artifact
              uses: actions/upload-artifact@v4
              with:
                  name: artifact-sdist
                  path: dist

    upload-pypi:
        runs-on: ubuntu-latest
        name: upload release to PyPI
        needs: [create-wheels, create-sdist]
        environment: release

        permissions:
            # IMPORTANT: this permission is mandatory for trusted publishing
            id-token: write

        steps:
            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  path: dist
                  merge-multiple: true

            - name: Publish package distributions to PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  skip-existing: true
