---
name: Build wheels and upload wheels and source distribution to PyPI

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  SETUPTOOLS_ENABLE_FEATURES: legacy-editable

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            toolchain: {compiler: gcc, version: 13}
          - os: windows-latest
            toolchain: {compiler: gcc, version: 13}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}
      - run: ${{ env.FC }} --version
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.18.0
        env:
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-*
          CIBW_SKIP: pp* cp36-* cp37-* *_i686 *-win32

          CIBW_BEFORE_BUILD_LINUX: |
            yum upgrade -y || apt-get update -y || apk update ;
            yum upgrade -y hdf5-devel openblas-devel || apt-get install -y libhdf5-dev libopenblas-dev || apk add --update hdf5-dev openblas-dev
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014

          # Use delvewheel on windows
          CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"

          CIBW_BEFORE_BUILD: |
            python3 -m pip install meson-python

          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND_LINUX: >
            cd {project} &&
            pytest
          CIBW_TEST_COMMAND_MACOS: >
            cd {project} &&
            pytest
          CIBW_TEST_COMMAND_WINDOWS: >
            cd /d {project} &&
            pytest
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  pypi-publish:
    runs-on: ubuntu-latest
    environment: release
    name: upload release to PyPI

    needs:
      - build_wheels
      - build_sdist

    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
